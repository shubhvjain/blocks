The simple algorithm :
1. split the input document into blocks
2. initialise blank doc objects
3. first pass (generate doc object)
4. check block dependencies and generate order of processing
5. second pass (process all annotations)

========
Here's the program :

.[main]
const graph = require("./graph")
const generateDocumentObject = (document,options={})=>{
  const DEV = false 
  >[declarations]
  >[step 1]
  >[step 2]
  >[step 3]
  >[step 4]
  >[step 5]
  return docObject
}
module.exports.generateDocumentObject = generateDocumentObject

=========
Annotations :
1. declaration
   .[block id, data type] block title
   block content
   or
   .[block id] single line block content
2. append
   +[block id] add this content to the block
3. invocation
   .[block 1] block 1 content
     > [block 2]
   .[block 2] this is block 2
4. graph edges
   .[block 1] ~ [node1, label, node2] (use * instead of the node name to consider the current vertex)
5. action annotation
   / [action-name: argument list]

========

Step 1 : split the document   | Doc --> list of blocks | 

Each block ends with a new line. This means split the document by 2 new line characters ("/n/n")

Are there any special purpose blocks that can be added by default to the document ? No. The main reason is to keep the program simple. Also different document may require different type of special blocks. And the meaning of "special" is also very subjective.  This can be done as an additional step. For instance one can make a program to append another file in the beginning of the doc that contains all special blocks.

.[step 1]
let blocks = document.split("\n\n")

==========

Step 2 : initialising the block doc obj

The skeleton of the doc object :
1. valid : boolean
2. blocks :['block1',....] : array of block ids defined in the document 
3. data : { "blockId": {content} ,...}
4. graphs : {  } : contains all graphs related to the document. this includes : block dependency, topological order of blocks , knowledge graph 
5. errors : [] : contains errors generated while processing the document
6. warnings : [] : contains any warning that occurred during the processing of the doc
7. metadata : { } , like timestamp of processing , block program version used, etc.. 


.[step 2]
let docObject = {
  valid : true ,
  blocks :[] ,
  data : {} ,
  graphs : {} ,
  errors : [],
  warnings: [],
  metadata : {},
  extra: {}
}

At this point we would also like to initialise the 2 doc graphs : the invocation block dependency graph and doc knowledge graph

+[step 2]
docObject.graphs.deps = graph.createGraph({
 isSimple : true,
 hasLoops: false,
 hasDirectedEdges: true, 
 title: "Invocation block dependency graph"
})
docObject.graphs.knowledge = graph.createGraph({
 hasLoops: false,
 isSimple: true,
 hasDirectedEdges:true,
 title: "Knowledge graph"
})


It will also be nice to have some utility functions to make updates in the docObject more consistent throughout the program

During the processing, we will records errors and warnings. these can be recorded easily using the following utility functions :

+[step 2]
const docError = (data)=>{
   docObject.valid = false
   docObject.errors.push(data)
}
const docWarn = (data)=>{
  docObject.warnings.push(data)
}


============

Step 3 : first pass through the blocks

In this step we finally starting building the doc objects. we iterate through the list of blocks and try to process each block individually.
For block this could mean 2 things :
- if a block does not depend on any other block, the block will be fully processed by the end of this step.
- if a block depends on another block , it would require further processing.

But how can a block be related to another block ? There can be multiple types of dependencides:
- one block may depend on another block for its content when using the invocation annotation.
- a block may also be related to another label in the document's knowledge graph. it's possible to related a block to a block already defined in the document or a block that is yet to be defined (since the document structure can be non linear i.e. one could used blocks before declaring it)
- it can also be related to another block using action annotations defined in the block

So whether a block has dependencies or not depends on the annotations used in it.

Here'a a basic outline of the steps involved in the first pass :

for each block :
1. validate block content
2. extract all annotations
3. process annotations

A note on block ids: all spaces in the block id are replaced with "-" (dash)

This utility method replaces all spaces in the text :

.[declarations]
const removeSpace = (text) =>{
  let noSpaceText = text.trim().replaceAll(/ +/g,'-')
  noSpaceText = noSpaceText.toLowerCase()
  return noSpaceText
}

we also need a method to create random block ids

+[declarations]
const randomInteger = (min=0,max=100) => { return Math.floor(Math.random() * (max - min + 1) + min)}  


The invocation annotation also be used to access sub parts (and sub sub parts) of a block content. there is only 3 level of nesting possible. anything further than that beats the purpose of having non linearity in the doc. The solution is to split the block into multiple parts and relate them in the doc knowledge graph. 

Here is a method that takes text and returns block id, sub part and sub-sub parts (which are separated by a dot) :

+[declarations]
const getParts = (text)=>{
  let parts = text.split(".")
  let data = { blockId:"", subPart:"", subSubPart:""}
  data.blockId = removeSpace(parts[0])
  data.subPart = parts.length >= 2 ? removeSpace(parts[1]) : ""
  data.subSubPart = parts.length == 3 ? removeSpace(parts[2]) : ""
  return data
}

Actions argument can have arguments, these are defined in a special way. this method process argument string and creates a json

+[declarations]
const parseActionArguments = (argumentText)=>{
  let result = { action:"", arguments:{ text:"",d:"0"}}
  const parts = argumentText.split(":")
  result.action = parts[0].trim()
  if(parts.length > 1){
    let argParts = parts[1].split(",")
    if(argParts.length>0){
      result.arguments['text'] = argParts[0].trim()
      argParts.shift()
      argParts.map(argu=>{
        let ar = argu.split("=")
        result.arguments[ar[0].trim()] = ar[1].trim()
      })
    }
  }
  return result
}

Before getting into the details, we must also define the annotations. Each annotation musts have an extract method that take in block content and returns processed value of the annotation.

Note that every extract method returns an array of valid annotations found

+[declarations]
const annotations = {
  declaration: {
    extract : (text)=>{
          const reg = /^\.\[([\+]?)([\w\s\-]+?)([,]*?)([\w\s\-]+?)\]/gm
  	  const parts = text.match(reg)
  	  if (parts) {
    	  let ann = { raw: parts[0], text: "", blockId: "", processed: false,
	             dataType: "default", found: true, type: "declaration" }
          const theString = parts[0]
	     .replace(".[", "")
	     .replace("]", "")
	     .trim()
          ann.text = theString
          let part1 = theString.split(",")
          ann.blockId = removeSpace(part1[0])
          if (part1.length > 1) {ann.dataType = part1[1].trim()}
          return [ann]
         } else { return []}
    }
  },
  append:{
      extract : (text)=>{
      	  const reg = /^\+\[([\+]?)([\w\s\-]+?)\]/gm
          const parts = text.match(reg)
  	  if (parts) {
    	     let ann = { type: "append",  raw: parts[0],    text: "",
                blockId: "",  found: true,  processed:false }
    	      const theString = parts[0]
	      .replace("+[", "").replace("]", "").trim()
    	      ann.text = theString
    	      ann.blockId = removeSpace(theString)
    	      return [ann]
  	  } else { return []}}
  },
  invocation:{
      extract : (text)=>{
         const reg = /\>\[([\w\s\-]+?)([\.]*)([\w\s\-]*)([\.]*)([\w\s\-]*)\]/gm
         const parts = text.match(reg)
         if (parts) {
            let anns = []
             parts.map(part => {
               let ann = { type: "invocation", raw: part, text: "",
                           blockId: "", subPart: "", subSubPart: "",
                            found: true, processed: false}
                const theString = part.replace(">[", "").replace("]", "").trim()
                 ann.text = theString
	         let data = getParts(theString)
                 ann = {...ann,...data}
      		 anns.push(ann)
              })
              return anns
          } else { return []}	  
      }
  },
  edge:{
      extract : (text)=>{
      	  const reg = /\~\[([\w\s\-\,\.\*]+?)\]/gm
    	  const parts = text.match(reg)
    	  if (parts) {
      	     let anns = []
      	     parts.map(part => {
             let ann = {
             	 type: "edge", raw: part, text: "",
		v1:"*", v2:"*", label:"",
          	found: true, processed: false}
              const theString = part.replace("~[", "").replace("]", "").trim()
              ann.text = theString
              let part1 = theString.split(",")
              if(part1.length == 2){
        	ann.v2 = removeSpace(part1[1])
          	ann.label = removeSpace(part1[0])
              } 
              else if (part1.length == 3){
        	ann.v1 = removeSpace(part1[0])
        	ann.v2 = removeSpace(part1[2])
                ann.label = part1[1]
              }else{
        	        throw new Error(`Invalid edge annotation : ${part}. Format : ~[node1, label, node 2] or ~[*,label, node 2] or ~[node1,label,*]  (* for current block id)`)
              }
              anns.push(ann)
      	    })
      	    return anns    
    	  }else{return []}
	  }
  },
  action:{
      extract : (text)=>{
        const reg = /\/\[([\s\w\:\,\=\%\.\_\-\/\>\<]+?)\]/gm
        const parts = text.match(reg)
        if (parts) {
          let anns = []
          parts.map(part => {
            let ann = {
               type: "action", raw: part, text: "",
        	action: "", arguments:{},found: true, processed: false}
              const theString = part.replace("/[", "").replace("]", "").trim()
              ann.text = theString
              let part1 = parseActionArguments(theString)
              ann = {...ann, ...part1}
              anns.push(ann)
           })
          return anns
        } else {return []}
      }
  }
}

We will also create a method to extract all annotations given some text.

+[declarations]
const extractAllAnnotations = (text)=>{
  let refText = text.trim()
  let annotationList = []
  let annCount = {}
  const allAnnotations = Object.keys(annotations)
  allAnnotations.map(ann=>{
     let anns = annotations[ann].extract(text)
     annCount[ann] = anns.length
     annotationList = [... annotationList, ... anns]
  })
  return {stats : annCount, annotations: annotationList}
}


Step 3 in more details :
for each block :
3.1. check if block is non empty
3.2. extract all annotations 
3.3 process annotations
   1. declaration annotation part 1 : defining a new block, check if this block is already defined
   2. append annotation
   3. innovation annotation part 1 : indicate that 2nd pass processing required by adding an edge in the block dep graph
   4. graph edge annotation

.[step 3]
try{
 blocks.map((block,blockIndex)=>{
   >[process block] 
 })
}catch(error){
  if(DEV){console.log(error)}
  docError({text:`${error.message}`, details:'Error occurred during the first pass '})
  return docObject
}

.[process block]
  >[step 3-1]
  >[step 3-2]
  >[step 3-3]

The first step is to validate block text. If the block text is blank, add a warning in the docObj and move to the next block.

.[step 3-1]
if(block.trim()==''){
  docWarn({"text":`Blank block at position ${blockIndex+1}`, blockIndex:blockIndex})
}

next we extract all annotations from the block text

.[step 3-2]
let ann = extractAllAnnotations(block)

now we process the annotations

beginning with decleration annotations and append annotations : if decelaration exists, process the new block. if it does not check if append exists. if not process new block with a random block id. 

.[step 3-3]
let newBlockData =  {
     blockId : "", text: "",
     source : { raw : [] , first: "" , second: "" },
     dataType: "default",
     value: {}, annotations :[],process: []
   }
let blockData
if(ann.stats.declaration == 1){
   let dec = ann.annotations.find(itm=>{return itm.type=='declaration'})
   if(docObject.data[dec.blockId]){throw new Error(`Redeclaration of ${dec.blockId} is invalid. Use append instead`)}
   let newText = block.replace(dec.raw,'')
   blockData = {
     ... newBlockData,
     blockId : dec.blockId,
     dataType: dec.dataType,
     text: newText,
     source : { raw : [block] , first: block , second: "" },
     annotations : ann.annotations,
     process: ['initialized']
   }
   blockData.process.push('block id declared')
   docObject.blocks.push(dec.blockId)
   docObject.data[dec.blockId] = blockData
}else if(ann.stats.append == 0) {
// define a new block
  let randomBlockName =  randomInteger(1000,9999)
  blockData = {
    ... newBlockData,
     blockId : randomBlockName ,
     text: block,
     source : { raw : [block] , first: block , second: "" },
     annotations : ann.annotations,
     process: ['initialized']
  }
   blockData.process.push('random block id assigned')
   docObject.blocks.push(randomBlockName)
   docObject.data[randomBlockName] = blockData
}
try{
 docObject.graphs.deps = graph.addVertex(docObject.graphs.deps,{id:blockData.blockId})
}catch(error){ if(DEV){console.log(error) }}


processing the append annotation :

+[step 3-3]
if(ann.stats.append == 1){
 let act = ann.annotations.find(itm=>{return itm.type=='append'})
 let blockFound = docObject.blocks.indexOf(act.blockId) > -1
 if(blockFound){
   blockData = docObject.data[act.blockId]
   let newText = block.replace(act.raw,"")
   blockData.text = blockData.text + "\n" + newText
   blockData.source.first = blockData.source.first + "\n" + block
   blockData.source.raw.push(block)
   blockData.annotations = [... blockData.annotations, ...ann.annotations ]
   blockData.process.push("text appened")
 }else{
  throw new Error(`the append annotation on block ${act.blockId} is not valid at this block does not exist.`)
 }  
}

Now, processing invocation annotations. they require further processing. so at this point we just create a new edge in the block dependency diagram

+[step 3-3]
if(ann.stats.invocation > 0){
 let allInv = ann.annotations.filter(itm=>{return itm.type =='invocation' })
 allInv.map(inv=>{
   if(inv.blockId == blockData.blockId){
     throw new Error(`Invalid invocation : ${inv.raw}`)
   }
   try{
     docObject.graphs.deps = graph.addVertex(docObject.graphs.deps,{id:inv.blockId})
   }catch(error){ if(DEV){console.log(error)}}
   docObject.graphs.deps = graph.addEdge(docObject.graphs.deps,{v1: blockData.blockId, v2: inv.blockId  })
  docObject.data[blockData.blockId].process.push(`inv ann: ${inv.raw} , edge in dep graph`)
 }) 
}

next, edge annotations have to be processed

+[step 3-3]
const allEdges = ann.annotations.filter(itm=>{return itm.type =='edge'})
allEdges.map(ed=>{
 let v1 = ed.v1 != "*" ? ed.v1 : blockData.blockId
 let v2 = ed.v2 != "*" ? ed.v2 : blockData.blockId
 if(v1==v2){throw new Error(`Invalid edge annotation ${ed.raw} `)}
 try{
  docObject.graphs.knowledge = graph.addVertex(docObject.graphs.knowledge,{id:v1})
 }catch(er){ if(DEV){console.log(er)}}
  try{
  docObject.graphs.knowledge = graph.addVertex(docObject.graphs.knowledge,{id:v2})
 }catch(er){ if(DEV){ console.log(er)}}
 docObject.graphs.knowledge = graph.addEdge(docObject.graphs.knowledge,{v1:v1, v2 : v2, label: ed.label})
 let newText = docObject['data'][blockData.blockId].text.replace(ed.raw,'')
 docObject['data'][blockData.blockId].text = newText
 docObject['data'][blockData.blockId].process.push(`edge-annotation: ${ed.text} processed`)
})

=========

Step 4 : dependency check

todo: validate graphs - all vertices in the graph are actually present as blocks in the doc

.[step 4]
try{
let order = graph.TopologicalSort(docObject.graphs.deps)
docObject.extra.blockOrder = order.vertexInOrder
docObject.graphs.dfsTree = order.dfsTree
docObject.graphs.tsTree = order.tsTree
}catch(error){
  if(DEV){console.log(error)}
  docError({text:`${error.message}`, details:'Error occured during dependency check '})
  return docObject
}



=========

Step 5 : Second pass

this involves the following steps :
- processing invocation annotations
- processing action annotations
- process data type of a block

.[step 5]
try{
docObject.extra.blockOrder.map(block=>{
 const blockId = block.vertexId
 if(!docObject.data[blockId]){
	throw new Error(`invocation error : the block "${blockId}" does not exists in the doc`)
 }
 let blockContent = docObject.data[blockId]
   >[step 5-1]
   >[step 5-2]
   >[step 5-3]
 })
}catch(error){
  if(DEV){console.log(error)}
  docError({text:`${error.message}`, details:'Error occurred during second pass '})
  return docObject
}

let's process the invocations first :

.[step 5-1]
 let invAnn = docObject.data[blockId].annotations.filter(itm=>{return itm['type']=='invocation'})
 invAnn.map(inv=>{
   let mainText =  blockContent.text
   if(!docObject.data[inv.blockId]){
     throw new Error(`invalid invocation ${inv.raw}, the block '${inv.blockId}' does not exists in the doc`)
   }
   let targetText = docObject.data[inv.blockId].text
   mainText = mainText.replaceAll(inv.raw,targetText)
   blockContent.text = mainText
   blockContent.process.push(`inv ${inv.raw} replaced`)
 })


processing actions. at this point , there are no actions. so they are just replaced.

.[step 5-2]
let actAnn = docObject.data[blockId].annotations.filter(itm=>{return itm.type == 'action'})
actAnn.map(act=>{
  let mainText = blockContent.text
  blockContent.text = mainText.replace(act.raw,'')
  blockContent.process.push(`action ann: replaced ${act.raw}`)
})

finally, process the data type. this requires defining functionality to process available data types 

+[declarations]
const dataTypeUtils  = {
  parseDefaultData : (blockText)=>{
    let data = {title: blockText , noLines: 0, linesWithoutTitle:[] }
    let lines = blockText.split("\n")
    const noOfLines = lines.length
    data.noLines = noOfLines
    if(noOfLines > 1){ data.title = lines[0] }
    lines.shift()
    data.linesWithoutTitle = lines
    return data
  },
 stringToObject : (text)=>{
    // string is of the form "title: text,  one = two , three = four, five = six"
  let parts1 =  text.split(' : ')
  let obj = { key: parts1[0].trim() , value: {}  }
  parts1.shift()
  let remaingString = parts1.join(" : ")
  let data = { text : remaingString  }
  let fields = remaingString.split(",")
  fields.map((field,index)=>{
    let v = field.split(" = ")
    if(v.length == 2){data[v[0].trim()] =  v[1].trim() }
    else if(index == 0){ data['text'] = field}
  })
  obj.value = data
  return obj
 }
}
const dataType = {
  "key-value":(block,utils)=>{
    let initialData = utils.parseDefaultData(block.text)
    let keyValueData = {}
    initialData.linesWithoutTitle.map((line) => {
      let l = line.trim()  
      if (l.trim().length > 0  && l[0]=='-') {
        l = l.replace("-","")
        const parsedString = utils.stringToObject(l)
        keyValueData[parsedString.key] = parsedString.value
      }
    })
    initialData.keyValueData = keyValueData
    initialData.type = "key-value"
    delete initialData.linesWithoutTitle
    return initialData    
  },
  "csv":(block,utils) => {
    let initialData = utils.parseDefaultData(block.text)
    let csvData = []
    initialData.linesWithoutTitle.map((line) => {
      let l = line.trim()  
      if (l.trim().length > 0  && l[0]=='-') {
        l = l.replace("-","")
        const parts = l.split(",")
        csvData.push(parts)
      }
    })
    initialData.csvData = csvData
    initialData.type = "csv"
    delete initialData.linesWithoutTitle
    return initialData
  },
  "list":(block,utils)=>{
    let initialData = utils.parseDefaultData(block.text)
    let listData = ["index item added by default"]
    initialData.linesWithoutTitle.map((line) => {
      let l = line.trim()  
      if (l.trim().length > 0  && l[0]=='-') {
        l = l.replace("-","")
        listData.push({ text: l })
      }
    })
    initialData.listData = listData
    initialData.type = "list"
    delete initialData.linesWithoutTitle
    return initialData
  },
  "resource-list":(block,utils)=>{
    let initialData = utils.parseDefaultData(block.text)
    let resourceData = {}
    initialData.linesWithoutTitle.map((line) => {
      let l = line.trim()  
      if (l.trim().length > 0  && l[0]=='-') {
        l = l.replace("-","")
        let parsedObj = utils.stringToObject(l)
        resourceData[parsedObj.key] = parsedObj.value
      }
    })
    initialData.resourceListData = resourceData
    initialData.type = "resource-list"
    delete initialData.linesWithoutTitle
    return initialData
  },
  "default":(block,utils)=>{
    let data = utils.parseDefaultData(block.text)
    data.type = "default"
    delete data.linesWithoutTitle
    return data
  }
} 

.[step 5-3]
let dt = {...dataType}
let dtu = {...dataTypeUtils}
let dataValue = dt[blockContent.dataType](blockContent,dtu)
blockContent.value = dataValue
blockContent.process.push('datatype processed')
