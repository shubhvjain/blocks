This program takes in an annotated document (a collection of blocks) , processes all annotations and generates "Document Object", which contains 4 main objects (along with other useful objects about the doc) : 
- "blockContent" object which  contains the final values of all  the blocks 
- "blockDependencyGraph :  a directed acyclic graph which shows the relationships among the blocks 
- "blockProcessingOrder" : the order in which the blocks must be processed to ensure that, for all blocks, their dependencies are processed before it
- "knowledgeGraph" : a graph that stores user defined relations between blocks, which are defined in the document using action annotations 

Here is the main program that does that : 

.[Main]
  >[Imports]
  >[Global Declerations]
  >[Utility Functions]
  >[Generate document object]
  >[Generate output document]

What will this "Main" program generate?
A Javascript module that returns 2 main functionalities: "generateDocObject" and "generateOutputDoc".
However, I still need to test all other methods. So I will create 2 different files for the program: one is the actual program file that exports just the 2 main functions. Another file where all the functionalities are exported to thoroughly test all parts of the program.

Here's the main program file :

.[Main Program]
  >[Main]
  module.exports = { generateDocObject, generateOutputDoc }

And here's the test program file:

.[Program for testing]
  >[Main]
  module.exports = { docToBlocks, getBlankDocObj, getBlankDepGraph, hashBlockId, annotations, generateProcessingOrder, generateDocObject, generateOutputDoc }

Moving on to the parts of the program :

The program depends on the Graph library I created as a separate project. See github.com/shubhvjain/graphs. I am assuming the latest version of the graph program is available with the name "graph.js" in the same folder which is imported here:

.[Imports]
const graph = require('./graph')

We require several utility functions.

.[Doc conventions]
- whenever I declare a block for a standalone method, I use the following naming conventions for that block: "Method to <function description>" . (e.g. Method to split doc)

.[Utility functions]
  >[Method to split doc into blocks]
  >[Method to generate random integer]  
  >[method to print an object]
  >[method to generate blank block content object]
  >[method to generate blank block dependency graph]
  >[method to generate blank knowledge graph]
  >[method to hash block name]

Blocks are the smallest units of processing. So we must extract all blocks from a document. 
This method takes in a doc and a splitter and returns an array of blocks by splitting the doc string using the provided splitter.
By convention, blocks are separated by a new line. 
So let's create a new global declaration for that

.[+Doc conventions]
- global declaration/variables names are in camel case and begin with upper case

.[Global declerations]
  const BlockSplitCharacter = "\n"
  >[Annotation declerations]

.[Method to split Doc into blocks]
const docToBlocks = (doc,splitter)=>{ return doc.split(splitter)}

.[Method to generate random integer]
const randomInteger = (min=0,max=100) => { return Math.floor(Math.random() * (max - min + 1) + min)}

This method is useful to assign random names to blocks which are not named in the document.  

.[method to print an object]
const print = (obj,indent=1)=>{console.log(JSON.stringify(obj,null,indent))} 

this utility function prints out an object. for debugging purpose

.[method to generate blank block content object]
const getBlankDocObj = ()=>{ return { blocks:[], data:{}}}

.[method to generate blank block dependency graph]
const getBlankDepGraph = ()=>{
  let newG = graph.createGraph({ title:"Block Dependency graph", hasLoops: false, hasDirectedEdges: true,  isSimple: true })
  return {...newG}
}

.[method to generate blank knowledge graph]
const getBlankKnowledgeGraph = ()=>{
  let newG = graph.createGraph({ title:"Doc knowledge graph", hasLoops: false, hasDirectedEdges: true,  isSimple: true })
  const defaultVertices = ['summary','todo']
  defaultVertices.map(ver=>{ newG = graph.addVertex(newG,{ id: ver, data: {} }) })
  return {...newG}
}

.[method to hash block name]
const hashBlockId = (text)=>{
  let txt = text.trim()
  let isAppend = false
  if(txt[0]=='+'){
    txt = txt.substring(1)
    isAppend = true
  }
  txt = txt.replaceAll(/ +/g,'-')
  txt = txt.toLowerCase()
  return { isAppend: isAppend, id: txt }
}

The above can be understood more easily with some examples:
- hash("block name") = "block-name"
- hash("Block Name") = "block-name"
- hash("BLOCK name") = "block-name"
- hash("  BLOCK   name   ") = "block-name"
(all the above produces the same output)
- hash("+block name") = "block-name"

\[todo:implement this] Some block names are reserved for some special purpose.

Now, the most important part of the programs. The annotation declarations. 

What are annotations ? Specifying annotations in the document is a way to include metadata related to the document content. Annotations make the document more structured and provide a way to extract "knowledge" from the document which can be further processed.  

There are 3 types of annotations :
- declaration : this will be used to declare blocks or give names to blocks
- invocation : this will be used to include the content of one block in another block (or to declare a block dependency)
- action : to declare metadata and actions. these annotations are processed within a "context" which is determined by the locations of where it is used

Each annotation type has a different delimiter within which they are "defined" in a document

For each type of annotation, we need to specify a few things :
- how to extract annotations from the block text ?
- how generate a replacement text for a certain annotation ? (after an annotation is successfully processed, it can either be removed from the processed block text or replaced with some text or left unchanged)
- how to initiate further processing of extracted annotations?


Here is the main object where all annotations are defined :

.[Annotation declerations]
const annotations = {
  >[decleration annotation],
  >[invocation annotation],
  >[action annotation]
}

.[decleration annotation]
declaration: {
  extract:(text)=>{
      const tx = text.trim()
      const theRegex = /^\.\[([\+]?)([\w\s\-]+?)\]/gm
      const parts = tx.match(theRegex)
      let rawSource = `.[${randomInteger(10000,99999)}]`
      if(parts){rawSource = parts[0]}
      let processedSource = rawSource.replaceAll(".[","")
      processedSource = processedSource.replaceAll("]","")
      const blockName = hashBlockId(processedSource)
      return { rawSource, ...blockName}
    },
    generateText: (text)=>{
      const theRegex = /^\.\[([\+]?)([\w\s\-]+?)\]/gm
      return text.replaceAll(theRegex,"")
    }
}

Declarations are enclosed within : ".[]".
It must be specified at the beginning of the block.
Valid character : all alphanumeric characters and one symbol : dash ("-"). nothing else. see the method to hash block name function to see how a name is assigned to a block. 

.[invocation annotation]
invocation: {
    extract: (text) =>{
      const txt = text.trim()
      const theRegex = /\>\[([\w\s\-]+?)\]/gm
      const parts = txt.match(theRegex)
      let asmts = []
      if(parts){
        parts.map(part=>{
          let t = part.replaceAll(">[","")
          t = t.replaceAll("]","")
          asmts.push({ rawSource: part, blockId: hashBlockId(t)['id']})
        })
      }
      return asmts
    }
}

.[action annotation]
action: {
  extract: (text) => {
    const txt = text.trim()
      const theRegex = /\/\[([\s\w\:\,\=\%\.\_\-\/]+?)\]/gm
      const parts = txt.match(theRegex)
      let actions = []
      if(parts){
        parts.map(part=>{
          let t = part.replaceAll("/[","")
          t = t.replaceAll("]","")
          let actionInfo = parseActionArguments(t)
          actions.push({ rawSource: part, ...actionInfo  })
        })
      }
      return actions
  }
}

Action annotations allow one to do a lot of things. 

How to specify them : within the "/[]" delimiter. one action per bracket. to define multiple actions, use multiple brackets
Each action has a format : "action-name : arguments". E.g. /[todo: do nothing.just a demo]

here is a list of things that can be done using action annotations :
- defining documents related actions. when working actively on a document , you would want to add actions that you can take later. for instance editing a block later. 
- relating the current block to some other block in the knowledge graph 
- specify the data type of a block
- load another file in the document 
- query and display part of the knowledge graph
- specify block format (e.g heading, section title etc...)

A note on how to specify action annotations:
Here are a few ways in which we can call a function in js:
- fn(arg1,arg2) : positional arguments ; have to remember the position of each argument
- fn(arg1=value1,arg2=value2) : arguments have names , their position can be changes ; more flexibilty
- fn({arg1:val,arg2:val}): similar to last one. now the function has a single argumnet which is an object ; position also does not matter
(in the last 2 we need to remember the names of arguments, which is better than remembering their position as in the first case)

.[about action args] The question is how to specify actions arguments ?
The format of specifying the action itself is fixed i.e. "action-name : arguments"
In most cases, there will be a single argument. like : "todo:this" where "this" will the value of the argument named "text". this is the default functioning. if the action has a single argument then it will be named "text" by default.
But some actions might require multiple arguments. for instance  when specifying the data type of a block as a resource, we also need to specify the location of the resource. 
This makes life simple: if an action has a single argument, no argument name required
In the case of actions with multiple arguments, the first argument is always named "text". all other arguments must be named. 
What will be the format of naming them ? : "action-name: text, arg-name= arg-value , arg-name2= arg-value2  "
- arguments are separated by comma (which means argument content cannot contain comma \[todo: fix this is later version] )
As an example : /[data:resource, location= /path/to/file.pdf , down= true ]

Every action will have some common arguments :
text - this is the default first arguments
d - this is a flag (either 0 or 1, 0 by default) : its value indicates whether to display the content of this action annotation in the final block content or hide it. what value is shown depends on the action. for instance in a todo action if d=1, then "(Todo: text-content )" is included in the final block value where this todo action was specified. 

What does it actually mean to process an action ?
or What are the possible things  an action can do?
They can :
- modifiy the content of the block in which they are defined 
- add a new edge to the knowledge graph 

Here's how to process various actions 

.[action declerations]
const parseActionArguments = (argumentText)=>{
  let result = { action:"", arguments:{ text:"",d:"0"}}
  const parts = argumentText.split(":")
  result.action = parts[0].trim()
  if(parts.length > 1){
    let argParts = parts[1].split(",")
    if(argParts.length>0){
      result.arguments['text'] = argParts[0].trim()
      argParts.shift()
      argParts.map(argu=>{
        let ar = argu.split("=")
        result.arguments[ar[0].trim()] = ar[1].trim()
      })
    }
  }
  return result
}
const actions = {
  'data': {
    'about':'To declare data type for a block',
    'process':(actionData,blockData)=>{
      // newBlockContentFields, newKnowledgeGraphEdge
      let selectedDataType = actionData.arguments.text
      let processedData = dataType[selectedDataType](blockData.text)
      return { newBlockDataFields : processedData  }
    },
    'generateText':()=>{}
  },
  'graph' :{
    'about':'to add an edge in the knowledge graph'
  }
}

testing this :

.[testing actions]
  >[action declerations]
  >[Annotation declerations]
  const testActionArguments = ()=>{
    console.log(parseActionArguments("test-action1"))
    console.log(parseActionArguments("test-action2:this is just one test argument"))
    console.log(parseActionArguments("test-action3:one, two = tr , three =  this is good  , four= haha "))
    console.log(parseActionArguments(""))
  }
  const testActionExtractions = ()=>{
    console.log(annotations.action.extract(`this is the text /[type:one] , /[type1:two, three=four  , five= six seven] , /[eight ] `))
    console.log(annotations.action.extract(`>[about action args]`))
  }
  testActionArguments()
  testActionExtractions()

Including it in the global declarations:

.[+global declerations]
  >[action declerations]

Now we must also talk about processing various datatypes available : 

.[data type processing decleration]
const parseDefaultData = (blockText)=>{
    let data = {title: blockText , noLines: 0, linesWithoutTitle:[] }
    let lines = blockText.split("\n")
    const noOfLines = lines.length
    data.noLines = noOfLines
    if(noOfLines > 1){ data.title = lines[0] }
    lines.shift()
    data.linesWithoutTitle = lines
    return data
}
const stringToObject = (text)=>{
  // string is of the form "title: one = two , three = four, five = six"
  let parts1 =  text.split(':')
  let data = {}
  let fields = parts1[1].split(",")
  fields.map(field=>{
    let v = field.split("=")
    data[ v[0].trim() ] = v[1].trim()
  })
  return { key: parts1[0].trim() , value : data  }
}
const dataType = {
  "key-value":(blockText)=>{
    let initialData = parseDefaultData(blockText)
    let keyValueData = {}
    initialData.linesWithoutTitle.map(line=>{
      let l = line.replace("-","").trim()
      if(l.trim().length>0){
        const parts = l.split(":")
        keyValueData[parts[0].trim()] = parts[1].trim()
      }
    })
    initialData.keyValueData = keyValueData
    initialData.type = "key-value"
    delete initialData.linesWithoutTitle
    return initialData    
  },
  "csv":(blockText) => {
    let initialData = parseDefaultData(blockText)
    let csvData = []
    initialData.linesWithoutTitle.map(line=>{
      let l = line.replace("-","").trim()
      if(l.trim().length>0){
        const parts = l.split(",")
        csvData.push(parts)
      }
    })
    initialData.csvData = csvData
    initialData.type = "csv"
    delete initialData.linesWithoutTitle
    return initialData
  },
  "list":(blockText)=>{
    let initialData = parseDefaultData(blockText)
    let listData = ['index item added by default']
    initialData.linesWithoutTitle.map(line=>{
      let l = line.replace("-","").trim()
      if(l.trim().length>0){
        listData.push({text:l})
      }
    })
    initialData.listData = listData
    initialData.type = "list"
    delete initialData.linesWithoutTitle
    return initialData
  },
  "resource":(blockText)=>{},
  "resource-list":(blockText)=>{
    let initialData = parseDefaultData(blockText)
    let resourceData = {}
    initialData.linesWithoutTitle.map(line=>{
      let l = line.replace("-","").trim()
      if(l.trim().length>0){
        let parsedObj = stringToObject(l)
        resourceData[parsedObj.key] = parsedObj.value
      }
    })
    initialData.resourceListData = resourceData
    initialData.type = "resource-list"
    delete initialData.linesWithoutTitle
    return initialData
  },
  "default":(blockText)=>{
    let data = parseDefaultData(blockText)
    data.type = "default"
    delete data.linesWithoutTitle
    return data
  }
}

.[Data type testing]
  >[data type processing decleration]
  let data = [
    { type:"default", value:`>[default text block 1]`},
    { type:"default", value:`>[default multiline block]`},
    {type:'csv',value:`>[table example]` },
    {type:'key-value',value:`>[key value store example]` },
    {type:'list',value:`>[list example]` },
    {type:'resource-list',value:`>[resource list 1]` },
  ]
  data.map(dt=>{console.log(dataType[dt.type](dt.value))})

Including it in the global declarations:

.[+global declerations]
  >[data type processing decleration]

Processing data types : 
Note that the data type values must be processed only after the complete text value of the block is obtained. 

Default:

.[default text block 1] this is a block content. plain , simple text

.[default multiline block] this is the title of the block
this block is multiline.
the first line in a multiline block is always its title. this is particularly useful when creating knowledge graphs.

Key value store :

.[key value store example] /[data:key-value] This is the title of the key value store
- key1 : value of key 1
- key2: value of key2

.[+key value store example]
- key3: value of key 3

List :

.[list example] /[data:list] this is similar to key value pair
- item 1 
- item 2
- item 3
- at this point, i will just have the single level of list 

.[+list example] 
- another element

Table:

.[table example] /[data:csv] this is the title of the csv data
- col1 label, col2 label, col 3 label 
- 1,2,3
- 3,4,5
- 6,7,8

.[+table example]
- 7,8,9
- 63,45,67

Resource: a block can also be an external resource 

.[external resource] /[data:resource , path = path/to/file]

.[resource list 1] /[data:resource-list]
- keyForRes1 : path = path , title = Something , note = Something

.[+resource list 1]
- keyForRes2 : remote-path = http something , title = something


More on resource data type :
- the resource path can be offline or online or both (in case of both, offline is preferred)
- technical note: resources are fetched on demand i.e. only when required in any output document generation part and not while generating the Document object.  
- offline path : 
  - eg. : "data:resource path=blah/blah/blah.pdf"
  - there are no absolute or relative paths. 
  - the path must refer to a file in the same folder (or a sub folder)
- online path :
   - e.g. "data:resource remote-path=https://website.com/some/file.png"
   - it need not be a file. it can also be a web page (in that case a copy of the webpage will be fetched) 

What's the point of defining a data type for a block ?
Now we can access specific parts of a block in invocation annotations. For examples:
- here is the value of the key named key1 in the block name "key value pair example" : >[key value pair example.key1]
- here is value of 1st item in the list "list example" : >[list example.1]
- here is the value from the 1st row and col1 from "table example" : >[table example.1.col1]

Resources can be used in many ways. the 2  common types of resources will be : images, PDF documents  
- if it's a pdf file , one can refer to individual pages of the doc
- if it's an image, one can refer to specific parts of the image

Now we need to generate the document object. 
The first step is actually generating the blocks by splitting the document. 
we must also initialise:
- the document object. this consists of :
  - an array of "blocks" which holds the blocks in the order in which they were declared in the document
  - a blank object "data". data will contain all processed block data. the key will be  unique block in the document and its value will be all the data related to that block. this may include the raw text, processed text, annotations used in the text etc...
- the block dependency graph. blocks once declared (via deceleration annotation) can be used in other blocks. this means some blocks will depend on other blocks for their full content. This means we have to make sure that there are no cyclic dependencies among the blocks and that a block is processed after all its dependent blocks are processed. This is ensured if the block dependency graph forms a directed acyclic graph. The block dependency graph captures the dependencies of one block over other. 

Consider the following example :
block1 : some text
block2 : some text + block 1

Here block2 is dependent on block1. in the dependency graph there will be a directed edge from block2 to block1 because block 2 depends on block1 for its content. thus block 1 must be processed first. 

Now consider 
block1 : some text + block 2
block 2: some text + block 3
block 3 : some text + block 1

The above blocks cannot be processed as there is a cyclic dependency between them. 

Once we have an array of blocks, we need to iterate through all the blocks to do a few things :
- one : process declaration annotations
  - determine the name of each blocks. 
  - some blocks might be named using the declaration annotation. if not, they have to be assigned a unique block name.
  - if block is being processed for the first time, we need to initialize the block in the blockContent object as well. 
  - if the block is being appended, some additional processing needs to be done 

- two : process block data. By default, blocks are simple text. Adding structure to a document also means being able to specify data in different formats with ease. the 2 most commonly used data structures are : dictionaries and tables

- three : process invocation annotation and build the dependency graph along the way. The final processing of blocks will take place only after the complete dependency graph is checked for cycle. This means we would need another iteration over the blocks to finally process them. Thus there will be 2 passes over the block: the first pass (which is currently being described here) and the second pass that takes place only after dependencies are checked. 

the second pass through the blocks :
in the second iteration, we assume that we have an order in which all the blocks of the document must be processed.
What does that processing look like:
- Replacing all invocation annotations with actual block text. 
- Replacing all action annotations with appropriate values (some need to be removed, some need to be replaced with a string) This includes processing the data type of the block. 

.[Generate document object]
  >[Method for First pass]
  >[Method to generate block processing order]
  >[Method for Second pass] 
  const generateDocObject = (doc,options={})=>{
    try{
      const blocks = docToBlocks(doc,"\n\n")
      let obj = firstPass(blocks)
      let blockContent = obj.d
      let blockDependencyGraph = obj.g
      let knowledgeGraph = obj.kg
      let order =  generateProcessingOrder(blockDependencyGraph)
      let finalValues = secondPass(blockContent,knowledgeGraph,order.vertexInOrder)
      blockContent = finalValues.blockContent
      knowledgeGraph = finalValues.knowledgeGraph
      return {blockContent, blockDependencyGraph, knowledgeGraph, ...order }
    }catch(error){console.log(error)}
  } 

.[Method for First pass]
const firstPass = (blocks) => {
  >[initialize doc and graph]
  blocks.map((block,index)=>{
    if(block){
        >[process decleration annotations]
        >[process invocation annotations]
        >[process action annotations]
    }
  })
  edgesToAdd.map(edge=>{g = graph.addEdge(g,edge)})
  return {d,g,kg}
}

.[initialize doc and graph]
  let d = getBlankDocObj()
  let g = getBlankDepGraph()
  let kg = getBlankKnowledgeGraph()
  let edgesToAdd = []

.[process decleration annotations]
const newBlock = annotations.declaration.extract(block)
const processedText = annotations.declaration.generateText(block)
if(d.blocks.indexOf(newBlock.id)==-1){
  d.blocks.push(newBlock.id)
  let data = {
    rawText: [{block,index}],
    text:processedText,
    annotations: { d:{index, ...newBlock}, i:{valid: []}, at:{valid: []}}
  }
  d.data[newBlock.id] = data
  g = graph.addVertex(g,{id:newBlock.id})
}else{
  if(newBlock.isAppend){
    d.data[newBlock.id]['text'] += processedText
    d.data[newBlock.id]['rawText'].push({block,index})
  }
}

.[process invocation annotations]
const allAsmts = annotations.invocation.extract(block)
allAsmts.map(itm=>{
  if(itm.id != newBlock.id){
    d.data[newBlock.id]['annotations']['i']['valid'].push({index,...itm})
    edgesToAdd.push({v2:itm.blockId, v1:newBlock.id })
  }
})

.[process action annotations]
  >[extract action annotations from block]
  >[add extracted annotation in blockContent data]
  >[add default data type]

.[extract action annotations from block]
let allActions = annotations.action.extract(block)

.[add extracted annotation in blockContent data]
allActions.map(itm=>{
  d.data[newBlock.id]['annotations']['at']['valid'].push({index,...itm})
})

.[add default data type]
let lookForDataType = d.data[newBlock.id]['annotations']['at']['valid'].find(itm=>{return itm.action == 'data' } )
if(!lookForDataType){
  d.data[newBlock.id]['annotations']['at']['valid'].push({ action:"data", arguments:{ text:"default",d:"0"}})
}

.[Method to generate block processing order]
const generateProcessingOrder = (blockDep)=>{ return graph.TopologicalSort(blockDep) }

.[Method for Second pass]
const secondPass = (docObj, kGraph, vertexOrder) => {
  vertexOrder.map(v=>{
    >[process invocation annotations again]
    >[process action annotations again]
  })
  return {blockContent: docObj, knowledgeGraph: kGraph }
}

.[process invocation annotations again]
let validAnn = docObj['data'][v.vertexId]['annotations']['i']['valid']
if(validAnn.length > 0){
  let mainText = docObj['data'][v.vertexId]['text']
  validAnn.map(annBlock=>{
    let annText = docObj['data'][annBlock.blockId]['text']
    mainText = mainText.replaceAll(`${annBlock.rawSource}`,annText)
  }) 
  docObj['data'][v.vertexId]['text'] = mainText
}

.[process action annotations again]
let validAct = docObj['data'][v.vertexId]['annotations']['at']['valid']
if(validAct.length > 0){
  validAct.map(act=>{
    //console.log(act)
    if(actions[act.action]){
      let actionEval = actions[act.action]['process'](act,docObj['data'][v.vertexId])
      //console.log(actionEval)
      if(actionEval.newBlockDataFields){
        let newBlockData = { ... docObj['data'][v.vertexId], ... actionEval.newBlockDataFields  }
        //console.log(newBlockData)
        docObj['data'][v.vertexId] = newBlockData
      }
    }
  }) 
}

Phew! the main part of the program is done! Now, given a document, we can generate a document Object for it which consists of blockContent, blockDependencyGraph, blockProcessingOrder and knowlegeGraph 
Now we can focus on generating outputs from this document. By utilizing all the objects generated for this document we can generate all sorts of documents. For instance, we can save the content of a certain block as a file. This block can be a fully functional program.
We can also generate interactive HTML documents. 

.[Generate output document]
const generateOutputDoc = async (doc,options={ type:"file-with-entry"})=>{
  if(!options.type){throw new Error("No doc type specified")}
  const docTypes = {
    "file-with-entry": async ()=>{
      if(!options.main){throw new Error("Specify the main block Id which contains the code")}
      const Document = generateDocObject(doc,options) 
      return Document['docObject']['data'][options.main]['text']
    },
    "explorer": async ()=>{
      const Document = generateDocObject(doc,options) 
      const allGraphs = [ Document.blockDependencyGraph, Document.knowledgeGraph, Document.dfsTree, Document.tsTree ]
      const graphHTML = await graph.generateGraphPreview(allGraphs,{format:'htmlParts'})
      const sanitizeArrows = (text)=>{
        let sText = text.replaceAll("<","&lt;").replaceAll(">","&gt;")
        return sText
      }
      let explorerHTML = `<!DOCTYPE html>
          <html lang="en">
            <head>
              <meta charset="UTF-8" />
              <meta http-equiv="X-UA-Compatible" content="IE=edge" />
              <meta name="viewport" content="width=device-width, initial-scale=1.0" />
              <title>Document Explorer</title>
              <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet"/>
              ${graphHTML.head}
            </head>
            <body>
              <style>.graph { width: 90%; height: 80vh; border: 1px solid #80808036; }</style>
              <div class="container-lg">
                <div class="row">
                  <div class="col-lg-12">
                    <h3>Document explorer</h3>
                    <ul class="nav nav-pills mb-3" id="pills-tab" role="tablist">
                      <li class="nav-item" role="presentation"> <button class="nav-link active" id="pills-source-tab" data-bs-toggle="pill" data-bs-target="#pills-source" type="button" role="tab" aria-controls="pills-source" aria-selected="true">Source</button></li>
                      <li class="nav-item" role="presentation"><button class="nav-link" id="pills-graph-tab" data-bs-toggle="pill" data-bs-target="#pills-graph" type="button" role="tab" aria-controls="pills-graph" aria-selected="false">Graphs</button></li>
                      <li class="nav-item" role="presentation"><button class="nav-link" id="pills-action-tab" data-bs-toggle="pill" data-bs-target="#pills-action" type="button" role="tab" aria-controls="pills-action" aria-selected="false">Actions</button></li>
                    </ul>
                    <div class="tab-content" id="pills-tabContent">
                      <div class="tab-pane fade show active" id="pills-source" role="tabpanel" aria-labelledby="pills-source-tab" tabindex="0">
                        <div class="row">
                          <div class="col-lg-6"> <h4> Source </h4> <pre>${sanitizeArrows(doc)}</pre></div>
                          <div class="col-lg-6"> <h4> Document object </h4> <pre>${sanitizeArrows(JSON.stringify(Document.blockContent,null,1))}</pre></div>
                        </div>
                      </div>
                      <div class="tab-pane fade" id="pills-graph" role="tabpanel" aria-labelledby="pills-graph-tab" tabindex="0">
                        ${graphHTML.body}
                      </div>
                      <div class="tab-pane fade" id="pills-action" role="tabpanel" aria-labelledby="pills-action-tab" tabindex="0">...</div>
                    </div>
                  </div>
                </div>
              </div>
            </body>
            <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js"></script>
          </html> `
      return explorerHTML
    }
  }
  const docContent = await  docTypes[options.type]()
  return docContent
}